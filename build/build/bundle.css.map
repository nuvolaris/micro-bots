{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Field.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { OpenWhisk } from \"./openwhisk\";\nimport { VERSION } from \"./const\";\nimport { BattleWeb } from \"./battleweb\";\nimport { AssetsLoader } from \"./util\";\nimport { onMount, afterUpdate, onDestroy } from \"svelte\";\nimport { inspector, source, rewards, ow } from \"./store\";\nimport { log } from \"./robot\";\nexport let base;\nexport let apihost;\nexport let namespace;\nlet battle;\nlet msg = $ow === undefined ? \"\" : \"Choose opponents\";\nlet status = \"Select Opponents\";\nlet ready = false;\nlet debug = false;\nlet extra = \"\";\nlet myBot;\nlet enemyBot;\nlet fighting = false;\nlet editing = false;\nlet robotName = \"\";\nlet robotType = \"\";\nlet myBots = [];\nlet enemyBots = [];\nlet cyanBots = enemyBots;\nlet redBots = enemyBots;\nlet searchCyanBot = \"\";\nlet searchRedBot = \"\";\nlet filteredCyanBots = cyanBots;\nlet filteredMyBots = myBots;\nlet filteredRedBots = redBots;\nlet canStartBattle = true;\nlet samples = [\"JsBot.js\", \"GoBot.go\", \"PyBot.py\"];\nlet sample = samples[0];\nlet regex = /^\\w{1,60}$/g;\nfunction check(r) {\n    if (r.ok)\n        return r.json();\n    else {\n        console.log(r);\n    }\n}\nlet password = \"\";\nlet logging = false;\nfunction login() {\n    logging = false;\n    if (password == \"\") {\n        alert(\"password cannot be empty\");\n    }\n    let url = base + \"/login\";\n    fetch(url, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ password: password }),\n    })\n        .then(check)\n        .then((r) => {\n        console.log(r);\n        if (\"error\" in r) {\n            alert(r.error);\n        }\n        else {\n            if (\"token\" in r) {\n                ow.set(new OpenWhisk(apihost, r[\"token\"], namespace));\n                window[\"ow\"] = $ow;\n                updateBots();\n            }\n        }\n    })\n        .catch((ex) => {\n        console.log(ex);\n        alert(\"Unexpected error - check logs\");\n    });\n}\nfunction create() {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!robotName.match(regex)) {\n            alert(\"Invalid Robot Name\");\n            return false;\n        }\n        robotType = sample.split(\".\").pop();\n        let src = base + \"/samples/\" + sample;\n        console.log(robotType, src);\n        let bot;\n        return fetch(src)\n            .then((data) => {\n            if (data.ok)\n                return data.text();\n            throw data.statusText;\n        })\n            .then((code) => {\n            bot = robotName + \".\" + robotType;\n            return $ow.save(bot, code, false);\n        })\n            .then((result) => __awaiter(this, void 0, void 0, function* () {\n            console.log(result);\n            if (\"error\" in result)\n                throw result[\"error\"];\n            source.set(bot);\n            return true;\n        }))\n            .catch((err) => {\n            alert(err);\n            return false;\n        });\n    });\n}\nfunction updateBots() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let res = yield fetch(base + \"/robots\").then((j) => j.json());\n        enemyBots = res;\n        cyanBots = Object.assign([], enemyBots);\n        cyanBots.sort(() => 0.5 - Math.random());\n        redBots = Object.assign([], enemyBots);\n        redBots.sort(() => 0.5 - Math.random());\n        if ($ow !== undefined) {\n            myBots = yield $ow.list();\n        }\n        updateSelectList();\n    });\n}\nfunction updateSelectList() {\n    filteredCyanBots = cyanBots.filter((item) => item.name.toLowerCase().indexOf(searchCyanBot.toLowerCase()) !== -1);\n    filteredMyBots = myBots.filter((item) => item.toLowerCase().indexOf(searchCyanBot.toLowerCase()) !== -1);\n    filteredRedBots = redBots.filter((item) => item.name.toLowerCase().indexOf(searchRedBot.toLowerCase()) !== -1);\n    if (myBots.length > 0) {\n        myBot = filteredMyBots[0];\n    }\n    else {\n        myBot = filteredCyanBots[0].url;\n    }\n    enemyBot = filteredRedBots[0].url;\n    console.log(\"updated\", myBot, enemyBot);\n}\nlet unsubscribeSource = source.subscribe((value) => {\n    editing = value != \"\";\n    updateBots();\n});\nfunction finish(winner) {\n    msg = \"Game over\";\n    if (winner == -2) {\n        image = \"ready\";\n        extra = \"\";\n    }\n    else if (winner == -1) {\n        image = \"draw\";\n        extra = \"\";\n    }\n    else if (winner == 0) {\n        image = \"won\";\n        extra = \"Great!\";\n    }\n    else {\n        image = \"lose\";\n        extra = \"\";\n    }\n    status = \"Select Opponents\";\n    ready = false;\n    fighting = false;\n    battle.stop();\n    inspector.set([\n        { n: 0, req: \"\", res: \"\", state: \"\" },\n        { n: 0, req: \"\", res: \"\", state: \"\" },\n    ]);\n}\nfunction trace() {\n    status = \"Tracing...\";\n    fighting = false;\n    msg = battle.trace();\n}\nfunction suspended(msg, state0, state1) {\n    status = msg;\n    fighting = false;\n    inspector.update((info) => {\n        info[0].state = state0;\n        info[1].state = state1;\n        return info;\n    });\n}\nfunction edit() {\n    console.log(myBot);\n    source.set(myBot);\n    battle.stop();\n    editing = true;\n}\nlet image = $ow === undefined ? \"splash\" : \"ready\";\nlet Images = new AssetsLoader({\n    splash: \"img/splash.png\",\n    ready: \"img/ready.png\",\n    lose: \"img/lose.png\",\n    won: \"img/won.png\",\n    draw: \"img/draw.png\",\n});\nfunction splash() {\n    //console.log(\"splash\")\n    let canvas = document.getElementById(\"arena\");\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, 500, 500);\n    ctx.drawImage(Images.get(image), 0, 0);\n}\nafterUpdate(() => {\n    if (!(editing || ready))\n        splash();\n});\nfunction selected() {\n    console.log(\"mybot\", myBot);\n    console.log(\"enemybot\", enemyBot);\n    let champ = myBots.length == 0\n        ? myBot\n        : $ow.namespace + \"/default/\" + myBot.split(\".\")[0];\n    let champExtraLives = 0;\n    let enemy = enemyBot;\n    let enemyExtraLives = 0;\n    let prefix = apihost + \"/api/v1/web/\";\n    let urls = [prefix + champ, prefix + enemy];\n    let canvas = document.getElementById(\"arena\");\n    let startAngles = [\n        [Math.random() * 360, Math.random() * 360],\n        [Math.random() * 360, Math.random() * 360],\n    ];\n    let startLives = [champExtraLives, enemyExtraLives];\n    battle.webinit(canvas.getContext(\"2d\"), urls, startAngles, startLives);\n    ready = true;\n    msg = \"May the best micro-services win!\";\n    status = \"Fighting!\";\n    fighting = true;\n    battle.draw();\n    battle.start();\n}\nfunction toggle() {\n    fighting = !fighting;\n    if (fighting) {\n        status = \"Fighting!\";\n        battle.start();\n    }\n    else {\n        status = \"Suspended...\";\n        battle.stop();\n    }\n}\nonMount(() => {\n    let canvas = document.getElementById(\"arena\");\n    battle = new BattleWeb(parseInt(canvas.getAttribute(\"width\")), parseInt(canvas.getAttribute(\"height\")), finish, suspended);\n    updateBots();\n    Images.loadAll(() => splash());\n});\nonDestroy(unsubscribeSource);\n//# sourceMappingURL=Field.svelte.js.map</script>\n\n<main class=\"wrapper\">\n  <section class=\"container\">\n    <div class=\"row\">\n      {#if msg == \"\"}\n        <img\n          style=\"padding-bottom: 20px\"\n          alt=\"banner\"\n          width=\"500\"\n          class=\"center\"\n          src=\"img/banner.png\"\n        />\n      {:else}\n        <h1>{msg}</h1>\n      {/if}\n    </div>\n    <div class=\"row\"><canvas id=\"arena\" width=\"500\" height=\"500\" /></div>\n\n    {#if !ready}\n      <div class=\"row\">\n        <h3>Select the opponents</h3>\n      </div>\n      <div class=\"row\">\n        <div class=\"column column-left column-offset\">\n          {#if $ow === undefined}\n            <label for=\"mybot\">Cyan Fighter</label>\n            <select bind:value={myBot} id=\"enemy\">\n              {#each filteredCyanBots as enemy}\n                <option value={enemy.url}>{enemy.name}</option>\n              {/each}\n            </select>\n          {:else}\n            <label for=\"mybot\">Your Fighter</label>\n            {#if myBots.length == 0}\n              <p>No fighters yet. Please create one.</p>\n            {:else}\n              <select bind:value={myBot} id=\"enemy\">\n                {#each filteredMyBots as bot}\n                  <option value={bot}\n                    >{bot.split(\".\")[0]}{$rewards > 0\n                      ? \" (+\" + $rewards + \")\"\n                      : \"\"}</option\n                  >\n                {/each}\n              </select>\n            {/if}\n          {/if}\n          <label\n            >Filter Cyan: <input\n              bind:value={searchCyanBot}\n              on:input={updateSelectList}\n            /></label\n          >\n        </div>\n        <div class=\"column column-right\">\n          <label for=\"enemy\">{$ow ? \"Enemy\" : \"Red\"} Fighter</label>\n          <select bind:value={enemyBot} id=\"enemy\">\n            {#each filteredRedBots as enemy}\n              <option value={enemy.url}>{enemy.name}</option>\n            {/each}\n          </select>\n          <label\n            >Filter Red: <input\n              bind:value={searchRedBot}\n              on:input={updateSelectList}\n            /></label\n          >\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"column column-left column-offset\">\n          {#if $ow === undefined}\n            {#if logging}\n              <form on:submit|preventDefault={login}>\n                <input\n                  id=\"password\"\n                  bind:value={password}\n                  type=\"password\"\n                  placeholder=\"password then enter\"\n                />\n                <button on:click={login}>Go</button>\n              </form>\n            {:else}\n              <button\n                id=\"login\"\n                on:click={() => {\n                  logging = true;\n                }}>Login</button\n              >\n            {/if}\n          {:else}\n            <div class=\"column column-right\">\n              <button id=\"edit\" on:click={edit} disabled={myBots.length == 0}\n                >Edit my Fighter</button\n              >\n            </div>\n          {/if}\n        </div>\n        <div class=\"column column-right\">\n          <button id=\"done\" disabled={!canStartBattle} on:click={selected}\n            >Start the Battle</button\n          >\n        </div>\n      </div>\n      {#if $ow === undefined}\n        <div class=\"row\">\n          <div class=\"column column-center column-offset\">\n            <h4>\n              Welcome to\n              <b>Micro-Bots</b>\n              v{VERSION}\n              <a target=\"_blank\" href=\"license.html\">(read license)</a>.\n            </h4>\n          </div>\n        </div>\n      {:else}\n        <div class=\"row\">\n          <div class=\"column column-left column-offset\">\n            <button id=\"create\" on:click={create}>Create New Fighter</button>\n          </div>\n          <div class=\"column column-right\">\n            <input\n              type=\"text\"\n              bind:value={robotName}\n              placeholder=\"robot name\"\n              id=\"botname\"\n            />\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"column column-left column-offset\" />\n          <div class=\"column column-right\">\n            <label for=\"template\">Pick a template:</label>\n            <select id=\"template\" bind:value={sample}>\n              {#each samples as item}\n                <option value={item}>{item}</option>\n              {/each}\n            </select>\n          </div>\n        </div>\n        <h4>{extra}</h4>\n      {/if}\n    {:else}\n      <div class=\"row\">\n        <h3>{status}</h3>\n      </div>\n      <div class=\"row\">\n        <h1>\n          <span id=\"cyan\">{battle.robotName(0)}</span> vs\n          <span id=\"red\">{battle.robotName(1)}</span>\n        </h1>\n      </div>\n      <div class=\"row\">\n        <div class=\"column column-left column-offset\">\n          <br />\n          <button id=\"fight\" on:click={toggle}>\n            {#if fighting}Suspend{:else}Fight!{/if}\n          </button>\n          <br />\n          <button\n            on:click={() => {\n              ready = false;\n              fighting = false;\n              battle.terminate();\n            }}>Stop</button\n          ><br />\n          <button id=\"edit\" on:click={edit} disabled={myBots.length == 0}\n            >Edit</button\n          >\n        </div>\n        <div class=\"column column-right\">\n          <br />\n          <label>\n            <input type=\"checkbox\" bind:checked={debug} />\n            Debug<br />\n            <a\n              href=\"https://apigcp.nimbella.io/wb/?command=activation+list\"\n              target=\"workbench\">Logs</a\n            >\n          </label><br />\n        </div>\n      </div>\n      {#if debug}\n        <div class=\"row\">\n          <div class=\"column column-left column-offset\">\n            <button id=\"step\" on:click={trace}>Trace</button>\n          </div>\n          <div class=\"column column-right\">\n            Trace:&nbsp;\n            <label>\n              <input type=\"checkbox\" bind:checked={log.eventOn} />\n              Events&nbsp;\n            </label>\n            <label>\n              <input type=\"checkbox\" bind:checked={log.requestOn} />\n              Requests&nbsp;\n            </label>\n            <label>\n              <input type=\"checkbox\" bind:checked={log.actionOn} />\n              Actions&nbsp;\n            </label>\n            (open console)\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"column column-50 column-offset\">\n            <b>[Me] {$inspector[0].state}</b><br />\n            Request/<b>Response</b>\n            #{$inspector[0].n}\n            <pre>{$inspector[0].req}<br /><b>{$inspector[0].res}</b>\n              </pre>\n            <b>[Emeny] {$inspector[1].state}</b><br />\n            Request/<b>Response</b>\n            #{$inspector[1].n}\n            <pre>{$inspector[1].req}<br /><b>{$inspector[1].res}</b>\n              </pre>\n          </div>\n        </div>\n      {/if}\n    {/if}\n  </section>\n</main>\n\n<style>\n  #arena {\n    border: 1px solid grey;\n    float: left;\n  }\n\n  #cyan {\n    color: rgb(16, 162, 212);\n  }\n  #red {\n    color: rgb(211, 19, 19);\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAieE,MAAM,aAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,KAAK,aAAC,CAAC,AACL,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC1B,CAAC,AACD,IAAI,aAAC,CAAC,AACJ,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACzB,CAAC"
}